#lang racket
;; Highly divisible triangular number
;; The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;; Let us list the factors of the first seven triangle numbers:
;;  1: 1
;;  3: 1,3
;;  6: 1,2,3,6
;; 10: 1,2,5,10
;; 15: 1,3,5,15
;; 21: 1,3,7,21
;; 28: 1,2,4,7,14,28
;; We can see that 28 is the first triangle number to have over five divisors.
;; What is the value of the first triangle number to have over five hundred divisors?

(include "l.rkt")

(define (tri-number base n)
  (+ base (add1 n)))

(define (how-many-divisors n)
  (let loop ((sum 0)
             (i 1)
             (max (sqrt n)))
    (if (> i max)
        sum
        (loop (cond [(and (= 0 (% n i)) (= i max)) (add1 sum)]
                    [(= 0 (% n i)) (+ sum 2)]
                    [else sum])
              (add1 i)
              max))))

(define (find-max-divisible-triangular-number max)
  (let loop ((base 0)
             (n 0))
    (if (> (how-many-divisors base) max)
        base
        (loop (tri-number base n) (add1 n)))))

(find-max-divisible-triangular-number 500)
